#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>

int partion(int a[],int l,int u)
	  {
	  	int temp,i,j,pivote;
	  	pivote=a[l];
	  	i=l;
	  	j=u+1;
	  	do
	  	{
	  	        do
	  		i++;
	  		while(a[i]<pivote&&i<=u);
	  		
	  		do
	  		j--;
	  		while(pivote<a[j]);
	  		if(i<j)
	  		{
	  			temp=a[i];
	  			a[i]=a[j];
	  			a[j]=temp;
	  		}
	  	}while(i<j);
	  	a[l]=a[j];
	  	a[j]=pivote;
	  	return j;
	  }			

void quick_sort(int a[],int l,int u)
{
   int j;
	if(l<u)
	 {
	 		j=partion(a,l,u);
	 		
	 		quick_sort(a,l,j-1);
	 		quick_sort(a,j+1,u);
	 }
}
void merge(int* arr,int l,int m,int r)

{
  int l1,i,j;
  int *temp;
  int len=r-l+1;
  temp=(int*)calloc(len,sizeof(int));
  for(i=l,j=m+1,l1=0;i<=m && j<=r;)
    {
      if(arr[i]<=arr[j])
	{
	  temp[l1++]=arr[i++];
	}
      else
	{
	  temp[l1++]=arr[j++];
	}
      }
  while(i<=m)
    {
      temp[l1++]=arr[i++];
    }
  while(j<=r)
   {
      temp[l1++]=arr[j++];
   }
  for(i=l,j=0;i<=r && j<l1;i++,j++)
    {
      arr[i]=temp[j];
    }
}

 
void merge_sort(int *arr,int l,int r)
{
  int m=(l+r)/2;
  if(l<r)
    {
      merge_sort(arr,l,m);
      merge_sort(arr,m+1,r);
      merge(arr,l,m,r);      
    }
}

int main()
{  
   int b,i,n;
   system("clear");
   
   int *arr;
   
   printf("\nhow many no.do you want to sort\n");
   scanf("%d",&n);
   
   arr=(int*)malloc(n*sizeof(int));
   
   
   printf("\nenter the number\n");
   for(i=0;i<n;i++)
   {
     scanf("%d",&arr[i]);
   }
   
   b=fork();
   
   if(b==0)
   {
     merge_sort(arr,0,n-1);
     printf("\nsorted array is printed by child :\n");
     for(i=0;i<n;i++)
      {
     	printf("\n%d",arr[i]);
      }
 
   }
   
   else
   {
     quick_sort(arr,0,n-1);
     printf("\nsorted array is printed by parent :\n");
     for(i=0;i<n;i++)
     {
     	printf("\n%d",arr[i]);
     }
   }  
     
 }
 
